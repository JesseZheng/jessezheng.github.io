<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mac第一篇]]></title>
    <url>%2F2018%2F07%2F10%2FMac%E7%AC%AC%E4%B8%80%E7%AF%87%2F</url>
    <content type="text"><![CDATA[我很开心呢 测试一下行不行 look more 好吗]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[5-21学习小结]]></title>
    <url>%2F2018%2F05%2F21%2F5-21%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Normal equation 标准方程能够快速计算(在n相对较小的情况)出θ的值不需要迭代。 Gradient Descent Normal Equation Need to choose alpha No need to choose alpha Needs many iterations No need to iterate O (kn^2) O (n^3), need to calculate inverse of X^T*X Works well when n is large Slow if n is very large In practice, when n exceeds 10,000 it might be a good time to go from a normal solution to an iterative process. If X^T*X is noninvertible, the common causes might be having : Redundant features, where two features are very closely related (i.e. they are linearly dependent) Too many features (e.g. m ≤ n). In this case, delete some features or use “regularization” (to be explained in a later lesson).]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[5-10学习小结]]></title>
    <url>%2F2018%2F05%2F10%2F5-10%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Model Representation 监督算法模型，给予一个训练数据集到学习算法，然后得到一个hypothesis(假设)函数 – 输入X值后能预测相应的Y值 Cost function 求出代价函数的最小值，对应的参数值就是假设函数的最佳参数。 等高线图，越往中心的弧圈代表代价函数J 的值越小。 Gradient descent algorithm(梯度下降算法) :=表示赋值运算符 如果系数偏大，导数为正数，系数会变小；反之，系数偏小，导数为负数，系数会变大。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[5.2学习小结]]></title>
    <url>%2F2018%2F05%2F02%2F5-2%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Supervised learning 给algorithm一个data set in which “right answers” given Regression: predict continuous valued output Classification = discrete valued output(0 or 1) Unsupervised learning just give algorithm a data set nothing else(no extra information)不知道数据集的意义 clustering algorithm 聚合算法 Cocktail party problem 鸡尾酒会算法 Octavediabetes]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bachelor, Master and Doctor]]></title>
    <url>%2F2018%2F05%2F02%2FBachelor-Master-and-Doctor%2F</url>
    <content type="text"><![CDATA[BA: 文学学士学位（Bachelor of Arts） BBA: 工商业管理学士学位(Bachelor of Business Administration) BS: 理学学士学位(Bachelor of sciense) MA：文学硕士学位(Master of Arts) MS：理学硕士学位(Master of Sciense) MBA：工商管理硕士学位(Master of Business Administration) PhD：哲学博士学位，文理科均可。(Doctor of Philosophy)]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学位</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python简单爬虫爬取豆瓣影人照片]]></title>
    <url>%2F2018%2F03%2F18%2Fpython%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E5%BD%B1%E4%BA%BA%E7%85%A7%E7%89%87%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# -*- coding: utf-8 -*-from bs4 import BeautifulSoupimport requests, os, refrom urllib.parse import urljoin# 豆瓣图片爬虫class SpiderMain(object): # 获取该页面上单独图片页面的链接 def _get_new_urls(self, page_url, soup): new_urls = set() reg = r"https://movie.douban.com/celebrity/" + page_url.split('/')[4] + r"/photo/\d+/$" #正则表达式 links = soup.find_all('a', href=re.compile(reg)) for link in links: new_url = link['href'] new_full_url = urljoin(page_url, new_url) new_urls.add(new_full_url) return new_urls #获取该名人的姓名作为图片文件夹名 def _get_name(self, root_url): response = requests.get(root_url) html_cont = response.content soup = BeautifulSoup(html_cont, 'html.parser') name = soup.find("div", attrs=&#123;"id":"content"&#125;).h1.text.split()[0] return name # 爬图片开始喽 def crawl(self, root_url): dir_name = self._get_name(root_url) dirIsExist = os.path.exists(os.getcwd() + r'\\douban\\%s'%dir_name) #该文件夹是否存在 if not dirIsExist: os.makedirs(os.getcwd() + r'\\douban\\%s'%dir_name) #创建图片文件夹 os.chdir(os.path.join(os.getcwd(), r'douban\\%s'%dir_name)) #进入该文件夹 n = 1 #图片数量 page = 0 #图片页码 while page &lt; 2: url_ = root_url + "photos/?start=%d" % (page*40) html_cont = requests.get(url_).content soup = BeautifulSoup(html_cont, 'html.parser') urls = self._get_new_urls(url_, soup) for url in urls: pic_name = str(n) + '.jpg' img_url = "https://img1.doubanio.com/view/photo/l/public/p" + url.split('/')[6] + ".jpg" pic = requests.get(img_url) with open(pic_name, 'wb') as file: #open函数? file.write(pic.content) file.flush() file.close() print("Crawl " + str(n) + " : " + img_url) n += 1 page += 1 print("Crawl succeed !")if __name__=="__main__": root_url = "https://movie.douban.com/celebrity/%d/" % 1274424 #只需修改该影人的豆瓣ID obj_spider = SpiderMain() obj_spider.crawl(root_url)]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[3.17学习小结]]></title>
    <url>%2F2018%2F03%2F17%2Fpost3-17%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Anaconda是什么? 简而言之就是python+一堆用来数据处理的第三方包+python环境和这些包的管理器 1）Anaconda附带了一大批常用数据科学包，它附带了 conda、Python 和 150 多个科学包及其依赖项。因此你可以立即开始处理数据。 2）管理包Anaconda 是在conda（一个包管理器和环境管理器）上发展出来的。在数据分析中，你会用到很多第三方的包，而conda（包管理器）可以很好的帮助你在计算机上安装和管理这些包，包括安装、卸载和更新包。 3）管理环境比如你在A项目中用了 Python2，而新的项目B老大要求使用Python 3，而同时安装两个Python版本可能会造成许多混乱和错误。这时候conda就可以帮助你为不同的项目建立不同的运行环境。 Conda命令关于管理环境 1）创建环境 在终端中使用: 1conda create -nenv_name package_names 上面的命令中，env_name是设置环境的名称（-n 是指该命令后面的env_name是你要创建环境的名称），package_names 是你要安装在创建环境中的包名称。 2）创建环境时，可以指定要安装在环境中的 Python 版本 当你同时使用 Python 2.x 和Python 3.x 中的代码时这很有用。要创建具有特定 Python 版本的环境，例如创建环境名称为py3，并安装最新版本的Python3在终端中输入： 1conda create -n py3 python=3 或也可以这样创建环境名称为py2，并安装最新版本的Python2： 1conda create -n py2 python=2 因为我做的项目不同，有时候会用到Python2，还有时候会用到Python3。所以我在自己的计算机上创建了这两个环境，并分别取了这样的环境名称：py2,py3。这样我可以根据不同的项目轻松使用不同版本的python。 如果你要安装特定版本（例如 Python3.6），请使用 1conda create -n py python=3.6 3）进入和离开环境 在 Windows 上，你可以使用activate my_env进入。在 OSX/Linux 上使用 source activate my_env 进入环境。 离开： 在 Windows 上，终端中输入： deactivate 在 OSX/Linux 上 输入： source deactivate 4）列出环境 我有时候会忘记自己创建的环境名称，这时候用conda env list就可以列出你创建的所有环境。 你会看到环境的列表，而且你当前所在环境的旁边会有一个星号*。默认的环境（即当你不在选定环境中时使用的环境）名为root。 5）删除环境 如果你不再使用某个环境，可以使用conda env remove -n env_name删除指定的环境（在这里环境名为 env_name）。 Conda关于包的管理 1）安装包 在终端中键入： 1conda install package_name 例如，要安装 pandas，在终端中输入： 1conda install pandas 你还可以同时安装多个包。类似 conda install pandas numpy 的命令会同时安装所有这些包。还可以通过添加版本号（例如 conda install numpy=1.10）来指定所需的包版本。 conda 还会自动为你安装依赖项。例如，scipy 依赖于 numpy，因为它使用并需要 numpy。如果你只安装 scipy (conda install scipy)，则 conda 还会安装 numpy（如果尚未安装的话）。 2）卸载包 在终端中键入 ： 1conda remove package_names 上面命令中的package_names是指你要卸载包的名称，例如你想卸载pandas包：conda remove pandas 3）更新包 在终端中键入： 1conda update package_name 如果想更新环境中的所有包（这样做常常很有用），使用：conda update --all。 4）列出已安装的包 12#列出已安装的包conda list 如果不知道要找的包的确切名称，可以尝试使用 conda search search_term 进行搜索。例如，我知道我想安装numpy，但我不清楚确切的包名称。我可以这样尝试：conda search num。 python类中的普通方法，静态方法和类方法 （装饰器@classmethod 和@staticmethod） 12345678910111213141516class A(object): #普通方法 def foo(self,x): print "executing foo(%s,%s)"%(self,x) #类方法 @classmethod def class_foo(cls,x): print "executing class_foo(%s,%s)"%(cls,x) #静态方法 @staticmethod def static_foo(x): print "executing static_foo(%s)"%xa=A() 下面是一个对象实体调用方法的常用方式.对象实体a被隐藏的传递给了第一个参数. 12a.foo(1)# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1) 用classmethods装饰,隐藏的传递给第一个参数的是对象实体的类(class A)而不是self(实例对象). 12a.class_foo(1)# executing class_foo(&lt;class '__main__.A'&gt;,1) 你也可以用类调用class_foo.实际上,如果你把一些方法定义成classmethod,那么实际上你是希望用类来调用这个方法,而不是用这个类的实例来调用这个方法.A.foo(1)将会返回一个TypeError错误,A.class_foo(1)将会正常运行: 用staticmethods来装饰,不管传递给第一个参数的是self(对象实体)还是cls(类).它们的表现都一样: 12345a.static_foo(1)# executing static_foo(1)A.static_foo('hi')# executing static_foo(hi) foo只是个函数,但是当你调用a.foo的时候你得到的不仅仅是一个函数,你得到的是一个第一个参数绑定到a的”加强版”函数.foo需要两个参数,而a.foo仅仅需要一个参数. a绑定了foo.下面可以知道什么叫”绑定”了: 12print(a.foo)# &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt; 如果使用a.class_foo,是A(类)绑定到了class_foo而不是a(对象实体). 12print(a.class_foo)# &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt; 最后剩下静态方法,说到底它就是一个方法.a.static_foo只是返回一个不带参数绑定的方法.A.static_foo和a.static_foo只需要一个参数. 12print(a.static_foo)# &lt;function static_foo at 0xb7d479cc&gt; 参考资料 conda官方命令文档 初学python者自学anaconda的正确姿势是什么？？ Python 中的 classmethod 和 staticmethod 有什么具体用途？ - 知乎 装饰器@staticmethod和@classmethod有什么区别_ _ Stackoverflow about Python]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[演员的定义]]></title>
    <url>%2F2018%2F02%2F15%2F%E6%BC%94%E5%91%98%E7%9A%84%E5%AE%9A%E4%B9%89%2F</url>
    <content type="text"><![CDATA[花了些时间看完了今日影评·表演者言，节目分为10期，每期15分钟左右，节目发起人周迅（小迷弟）和一些老戏骨嘉宾一起来讲述他们对演员的理解和演员所需要的能力和品质。 节目虽短，但内容却十分充实。周迅和这些优秀的演员都能很真诚地描述他们的经历经验以及对演员的理解。他们作为过来人，很多东西都值得年轻演员学习和参考。 对于一名优秀的演员来说，TA需要拥有什么呢？ 体验生活最重要也是最根本的一点，作为一个演员，最好的表演往往是最真实的。 表演源自于生活，好的演员能呈献给观众生活中的点滴和细节。而这些细腻的东西都需要人从生活体验并积累。种种经历会不断丰富你的阅历，阅历会让表演充实和真实。所以说最好的表演也是无表演，它就像是生活中真真实实发生的事。 观察生活身边的每一个人，每一件事都可以是电影中的一部分。而观察人物的一举一动和事件的发展过程，是提升演员自身对角色和故事理解的重要方法。因为作品中的每个角色往往都能在现实中找到类似的模板。 当你对演绎某个角色感到困惑的时候，现实生活往往会给你答案。察言观色是理解一个角色的必备技能。 学习互补向优秀演员取经，吸收他们的优点，相互促进，提升自己。通过一部又一部的作品去学习每个方面，从导演角度从各个角度去审视作品。 理性之中融入感性演员到头来还是要由理性主导的。在尊重作品，尊重人物的前提下加入演员的主观想法（自身理解）是角色演绎的最高境界。 感性至上带来的结果往往就是极端表现，角色的特征被演员自身特点代替或是角色形象是演员自己处理后模样。这会使角色带上个人情感色彩，可能不利于角色和作品本身。但也有一些情况是，在演员自身极具天赋的情况下，感性演绎会给角色附上一个独特色彩，让角色升华。这样的情况往往会出现在一些非科班出身的演员上。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[未来七日计划]]></title>
    <url>%2F2018%2F01%2F31%2Fplan%2F</url>
    <content type="text"><![CDATA[计划flag写一点简单的hexo入门教程 hexo+github搭建个人博客入门（自己学习心得） 关于hexo的备份（在github上再创建一个备份branch，因为hexo d deploy上去的只是网页的静态文件不是hexo项目整个文件夹） 先这样吧 资料hexo备份 使用hexo，如果换了电脑怎么更新博客？ - CrazyMilk的回答 - 知乎 手把手教你用Hexo+Github 搭建属于自己的博客 GitHub+Hexo 搭建个人网站详细教程]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora-学习笔记]]></title>
    <url>%2F2018%2F01%2F30%2FTypora%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[字体斜体 * *加粗 ** ** 或者__ __下划线 &lt;u&gt; &lt;/u&gt;删除线 ~~ ~~代码块1print('hello world!') 1System.out.println("Hello World!"); 123​```语言balabala 有序列表 一一 二二 三三 1231. 112. 223. 33 无序列表 周 冬 雨 1234- 小- 黄- 鸭-,+,*皆可 链接这个是链接啊 &lt;www.baidu.com&gt; 12[word](link)&lt;link&gt; 引用 第一级引用 第二级 第三级 123&gt; 1 &gt; 2 &gt; 3 居中居中了吗？ 1&lt;center&gt;居中了啦~&lt;/center&gt; 标注（Hexo不支持T_T）Example[^1] [^1]: this is a note 12某些人用过了才知道[^注释][^注释]:Somebody that I used to know. 表格 周 冬 雨 郑 茅 炜 在 一 起 快捷键Ctrl+T 图片插入 12![ALT](image.jpg 图片介绍)&#123;% asset_img 图片ALT pic.jpg 图片介绍 %&#125; 多选框（任务列表）-[ ] 文字—–代表没有选中的复选框 -[x] 文字——代表选中的复选框 -[x] 数学 -[ ] 英语 1234567-[空格]空格 文字—–代表没有选中的复选框-[x]空格 文字——代表选中的复选框-[x] 数学-[ ] 英语 常用快捷键加粗：Ctrl+B 斜体：Ctrl+I 字体：Ctrl+数字 下划线：Ctrl+U 返回开头：Ctrl+Home 返回结尾：Ctrl+End 生成表格：Ctrl+T 创建链接：Ctrl+K ReferencesTypora学习笔记 - CSDN博客 Markdown的常用语法(个人总结) - 简书 Hexo博客搭建之在文章中插入图片]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重庆森林]]></title>
    <url>%2F2018%2F01%2F30%2F%E9%87%8D%E5%BA%86%E6%A3%AE%E6%9E%97%2F</url>
    <content type="text"><![CDATA[​ “发胖的肥皂，流泪的毛巾 和30个凤梨罐头。” 人的一生啊人的一生就是无数经历 感谢那些让你拥有经历的人 无论经历是好是坏结果是悲是喜 它会是人生中最珍贵的东西 为什么很多时候一些作品映入眼帘却毫无头绪 想想其实道理很简单 缺少阅历 缺少经历 缺少积累 一旦你的大脑中有类似的记忆 作品往往触发这些记忆 所谓感同身受 这就是经历的宝贵之处 而它是不可能用物质或者任何东西去换 去买 所以啊 人越是成长越是要学会感恩 不光光是对那些帮助过你的人 还有那些带给你经历的人 人与人之间我们每个人其实一直都在潜移默化地改变 没有改变永远都是相对而言罢了 这个世界 那些你身边的人 都是你自己化学反应的催化剂 而你也是他们的催化剂 人与人之间往往就是这样一个微妙的关系 如同王吉民老师说的 ‘恋爱的过程就是两个互相学习’ 到最后往往对方都会慢慢变成自己的模样或者自己喜欢的样子 重庆的森林当然多愁善感没人能避免 发胖的肥皂和流泪的毛巾 30个凤梨罐头 人容易被感情驱使 这是人最有趣的特点了吧重庆森林每个阶段都会产生每种感受 就像我上面说的 经历决定感受 情感产生经历 这就是人生]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test_my_site]]></title>
    <url>%2F2018%2F01%2F30%2Ftest-my-site%2F</url>
    <content type="text"><![CDATA[继续测试继续测试]]></content>
      <categories>
        <category>测试分类</category>
      </categories>
      <tags>
        <tag>测试标签</tag>
      </tags>
  </entry>
</search>
